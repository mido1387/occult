#!/bin/bash
# PART 1: Initial ORCA Jobs (MPI Parallel)
#SBATCH --job-name=v4_test_occult_part1
#SBATCH --output=occult_part1.out
#SBATCH --error=occult_part1.err
#SBATCH --nodes=1
#SBATCH --ntasks=36
#SBATCH --cpus-per-task=1
#SBATCH --time=2-00:00:00

# --- User-Defined Variables ---
XYZ_FILE="REPLACE.xyz"
CHARGE=0
SPIN=1
NSOLV=0
SOLVENT=Water

# --- Part 0: Load User Paths and Set Up Environment ---

# Source the configuration file
source "${SLURM_SUBMIT_DIR}/config.sh"

# 2. Check if the ORCA_INSTALL_DIR variable was loaded correctly.
if [ -z "$ORCA_INSTALL_DIR" ] || [ ! -d "$ORCA_INSTALL_DIR" ]; then
  echo "Error: ORCA_INSTALL_DIR is not set or not a valid directory in config.sh." >&2
  exit 1
fi

# --- Setup and Module Loading ---
set -e #change the e to xv for verbose debugging
# Load modules specified in the config file
if [ -n "$REQUIRED_MODULES" ]; then
  echo "Loading modules: $REQUIRED_MODULES"
  module load $REQUIRED_MODULES
else
  echo "No modules specified in config file."
fi

# Activate Conda environment
if [ -n "$CONDA_ENV_NAME" ]; then
  echo "Activating Conda environment: $CONDA_ENV_NAME"
  # Assuming 'conda' is available after loading modules or is in the default PATH
  source activate "$CONDA_ENV_NAME"
else
  echo "Error: CONDA_ENV_NAME is not set in config.sh." >&2
  exit 1
fi

echo "Setting up environment for ORCA installation at: $ORCA_INSTALL_DIR"
export PATH="${ORCA_INSTALL_DIR}/bin:$PATH"
export LD_LIBRARY_PATH="${ORCA_INSTALL_DIR}/lib:$LD_LIBRARY_PATH"

cd $SLURM_SUBMIT_DIR

# --- Create the Central Configuration File ---
# This file will pass variables to the next scripts.
CONFIG_FILE="workflow.conf"
echo "Writing initial settings to $CONFIG_FILE"

# First, calculate the BASENAME from the XYZ_FILE variable
BASENAME=$(basename "$XYZ_FILE" .xyz)

# Now, write the simple values to the config file.
# The shell will expand the variables before writing.
cat > $CONFIG_FILE << EOL
# Workflow configuration generated by job $SLURM_JOB_ID
export XYZ_FILE="$XYZ_FILE"
export CHARGE="$CHARGE"
export SPIN="$SPIN"
export NSOLV="$NSOLV"
export SOLVENT="$SOLVENT"
export BASENAME="$BASENAME"
EOL

echo "--- Starting Part 1: Initial ORCA Calculations ---"

# --- Run Initial Steps ---
# MODIFIED: Added $SOLVENT to the python script call
python nsolv.py $NSOLV $XYZ_FILE $CHARGE $SPIN $SOLVENT

# Define file paths and run first ORCA job
SOLV_INP="nsolv/${BASENAME}_nsolv_${NSOLV}.inp"
echo "Running ORCA on $SOLV_INP..."
"$ORCA_EXEC" "$SOLV_INP" > "${SOLV_INP%.inp}.out"

# Generate GOAT input
# MODIFIED: Added $SOLVENT to the python script call
python generate_goat_inp.py "nsolv/${BASENAME}_nsolv_${NSOLV}.solvator.xyz" $CHARGE $SPIN $SOLVENT --nsolv ${NSOLV}

# Define GOAT file path and run second ORCA job
GOAT_INP="goat/${BASENAME}_nsolv_${NSOLV}.goat.inp"
echo "Running ORCA on $GOAT_INP..."
"$ORCA_EXEC" "$GOAT_INP" > "${GOAT_INP%.inp}.out"

# --- Prepare Handoff for Part 2 ---
FINAL_ENSEMBLE=$(find goat -name "*finalensemble.xyz" | head -n 1)
if [[ -z "$FINAL_ENSEMBLE" ]]; then
    echo "FATAL ERROR: finalensemble.xyz not found in goat/. Aborting workflow."
    exit 1
fi

# Append the full path of the key output file to the config file
echo "export FINAL_ENSEMBLE=\"$(realpath $FINAL_ENSEMBLE)\"" >> $CONFIG_FILE
echo "Found final ensemble file: $FINAL_ENSEMBLE"

# --- Submit the Next Part of the Workflow ---
echo "Part 1 complete. Submitting Part 2 (CENSO)."
sbatch --dependency=afterok:$SLURM_JOB_ID occult_part2_censo.s
